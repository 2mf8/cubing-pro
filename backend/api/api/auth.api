syntax = "v1"

import "generally.api"

type (
	AuthCodeReq {
		Ip string `json:"ip"`
	}
	AuthCodeResp {
		GenerallyResp
		Timeout   int64  `json:"timeout"`
		MdCode    string `json:"mdCode"`
		CodeImage string `json:"codeImage"` // base64
	}
	LoginReq {
		UserName  string `json:"userName"`  // 用户名
		Password  string `json:"password"`  // 密码
		Timestamp int64  `json:"timestamp"` // 客户端时间戳
		Ip        string `json:"ip"`        // Ip地址
		MdCode    string `json:"mdCode"`    // 获取校验码的数据
		AuthCode  string `json:"authCode"`  // 验证码
	}
	LoginResp {
		GenerallyResp
		Refresh string `json:"refresh"`
		Token   string `json:"token"`
		Timeout int64  `json:"timeout"`
	}
	RegisterReq {
		LoginReq
		MyID    string `json:"myId"`
		LoginID string `json:"loginId"`
		QQ      string `json:"qq"`
	}
	RegisterResp {
		GenerallyResp
		Refresh string `json:"refresh"` // 长期刷新秘钥
		Token   string `json:"token"`
		Timeout int64  `json:"timeout"`
	}
	RefreshToeknReq {
		Refresh string `json:"refresh"`
	}
	RefreshToeknResp {
		Token   string `json:"token"`
		Timeout int64  `json:"timeout"`
	}
)

// 用户注册登录相关接口
@server (
	jwt:    Auth
	group:  auth
	prefix: /v3/auth
)
service Api {
	@doc "校验码"
	@handler AuthCode
	get /code (AuthCodeReq) returns (AuthCodeResp)

	@doc "用户登录 / 获取权限token"
	@handler Login
	post /login (LoginReq) returns (LoginResp)

	@doc "用户注册"
	@handler Register
	post /register (RegisterReq) returns (RegisterResp)

	@doc "刷新秘钥"
	@handler RefreshToekn
	post /refresh (RefreshToeknReq) returns (RefreshToeknResp)
}

type (
	RoleListReq     struct{}
	RoleListResp    struct{}
	CreateRoleReq   struct{}
	CreateRoleResp  struct{}
	DeleteRoleReq   struct{}
	DeleteRoleResp  struct{}
	UpdateRoleReq   struct{}
	UpdateRoleResp  struct{}
	BindRoleReq     struct{}
	BindRoleResp    struct{}
	UnbindRoleReq   struct{}
	UnbindRoleResp  struct{}
	RoleRulesReq    struct{}
	RoleRulesResp   struct{}
	AddRulesReq     struct{}
	AddRulesResp    struct{}
	DeleteRulesReq  struct{}
	DeleteRulesResp struct{}
	UpdateRulesReq  struct{}
	UpdateRulesResp struct{}
)

// 用户角色管理
@server (
	jwt:    Auth
	group:  user_role
	prefix: /v3/auth
	// JwtInterceptor Jwt验证
	// TokenInterceptor 验证密码
	// UserAuthMiddleware 用户权限拦截
	middleware: JwtInterceptor,TokenInterceptor,UserAuthMiddleware
)
service Api {
	@doc "角色列表"
	@handler RoleList
	get /user_role (RoleListReq) returns (RoleListResp)

	@doc "添加角色"
	@handler CreateRole
	post /user_role (CreateRoleReq) returns (CreateRoleResp)

	@doc "删除角色"
	@handler DeleteRole
	delete /user_role (DeleteRoleReq) returns (DeleteRoleResp)

	@doc "修改角色"
	@handler UpdateRole
	put /user_role (UpdateRoleReq) returns (UpdateRoleResp)

	@doc "用户绑定角色"
	@handler BindRole
	put /user_role/bind (BindRoleReq) returns (BindRoleResp)

	@doc "用户解绑角色"
	@handler UnbindRole
	put /user_role/unbind (UnbindRoleReq) returns (UnbindRoleResp)

	@doc "角色权限列表"
	@handler RoleRules
	get /user_role/rules (RoleRulesReq) returns (RoleRulesResp)

	@doc "新增角色权限"
	@handler AddRules
	post /user_role/rules (AddRulesReq) returns (AddRulesResp)

	@doc "删除角色权限"
	@handler DeleteRules
	delete /user_role/rules (DeleteRulesReq) returns (DeleteRulesResp)

	@doc "修改角色权限"
	@handler UpdateRules
	put /user_role/rules (UpdateRulesReq) returns (UpdateRulesResp)
}